<html>
<head>
  <script src="crypto-js.js"></script>
  <script src="nibbler.js"></script>
  <script>
    var base32 = new Nibbler({dataBits: 8, codeBits: 5, keyString: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567', pad: '='});
    var base64 = new Nibbler({dataBits: 8, codeBits: 6, keyString: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/', pad: '='});
  </script>
</head>
<body>
  

<article class="markdown-body entry-content" itemprop="text"><h1>Hideez backup analyzer / Hideez бекап анализатор</h1>

<h2>English</h2>

<p>Hideez backup analyzer is a web application created to show data encoded in <a href="http://www.hideez.com/">Hideez Safe</a> backup (.hb) file.</p>

<p>Usually backup files are saved under the <em>c:\Users\USER_NAME\AppData\Roaming\Hideez Safe</em> folder.</p>

<p>To check passwords from the backup file just enter password and select file from local filesystem.</p>

<p>Backup file is analyzed in browser and neither password not backup file are not sent to the internet.</p>

<h2>Русский</h2>

<p>Hideez бекап анализатор это веб-приложение созданное чтобы показать данные, содержащиеся в <a href="http://www.hideez.com/">Hideez Safe</a> бекап (.hb) файле.</p>

<p>Обычно бекап файлы сохраняются в папке <em>c:\Users\USER_NAME\AppData\Roaming\Hideez Safe</em>.</p>

<p>Чтобы посмотреть пароли из бекап файла достаточно ввести пароль и выбрать файл с локального диска.</p>

<p>Бекап файл анализируется в браузере и ни пароли ни бекап файл не отправляются в интернет.</p>
</article>

<form enctype="multipart/form-data">
Password: <input type="text" id="password" />
<input id="upload" type="file" name="files[]" size=30>
</form>

<table id="table" border="1">
<thead>
<tr>
    <th>Account</th>
    <th>Desktop site/application</th>
    <th>Mobile site/application</th>
    <th>Login</th>
    <th>Password</th>
    <th>OTP</th>
</tr>
</thead>
<tbody>
</tbody>
</table>

<script>
function handleFileSelect(evt) {
    var files = evt.target.files; // FileList object

    // use the 1st file from the list
    f = files[0];

    var reader = new FileReader();

    // Closure to capture the file information.
    reader.onload = (function(theFile) {
        return function(e) {
            // decrypt file
            var password = document.getElementById("password").value;
            if (password == "")
            {
                alert("Password should be entered before selecting file");
                return;
            }
            password = password.substring(0, 32);
            while (password.length < 32) password += "\u0000";
            var key = CryptoJS.enc.Latin1.parse(password);
            var iv = CryptoJS.enc.Hex.parse('0000000000000000000000000000000000000000000000000000000000000000'); 
            var data = base64.encode(e.target.result);
            var decrypted = CryptoJS.AES.decrypt(data, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7});
            var xml = decrypted.toString(CryptoJS.enc.Latin1).substring(144);
            
            if (xml == null || xml == undefined)
            {
                alert("Cannot decode file");
                return;
            }
            if (decrypted.words[30] != 0)
            {
                if (!confirm("Looks like file was decided with error. Continue?"))
                    return;
            }
            
            // parse XML
            var parser = new DOMParser();
            var xmlDoc = parser.parseFromString(xml, "text/xml");
            var dbRecords = xmlDoc.getElementsByTagName("DbRecord");
            var recordMap = [];

            for (var i = 0; i < dbRecords.length; i++)
            {
              var dbRecord = dbRecords[i];
              var table = parseInt(dbRecord.getElementsByTagName("Table")[0].firstChild.textContent);
              var key = parseInt(dbRecord.getElementsByTagName("Key")[0].firstChild.textContent);
              var data = base64.decode(dbRecord.getElementsByTagName("Data")[0].firstChild.textContent.trim());
              
              if (table == 34)
              {
                var record = recordMap[key]; if (record == null) {recordMap[key] = record = {};};
                record.password = data;
              }
              else if (table == 35)
              {
                var record = recordMap[key]; if (record == null) {recordMap[key] = record = {};};
                record.loginKey = data.charCodeAt(0) + 256 * data.charCodeAt(1);
                record.otpKey = data.charCodeAt(2) + 256 * data.charCodeAt(3);
                record.account = data.substring(4);
              }
              else if (table == 36)
              {
                recordMap.forEach(function(record)
                {
                  if (record.loginKey == key) record.login = data;
                });
              }
              else if (table == 37)
              {
                recordMap.forEach(function(record)
                {
                  if (record.otpKey == key) record.otp = base32.encode(data.substring(1));
                });
              }
              else if (table == 40)
              {
                var record = recordMap[key]; if (record == null) {recordMap[key] = record = {};};
                record.mobileApp = data.substring(2);
              }
              else if (table == 50)
              {
                key = data.charCodeAt(0) + 256 * data.charCodeAt(1);
                var record = recordMap[key]; if (record == null) {recordMap[key] = record = {};};
                record.desktopApp = data.substring(2);
              }
              else
              {
                console.log("Table " + table + " is not known. Key " + key + ", data" + data);
              }
            }
            
            // show parsed elements in table
            var table = document.getElementById("table");
            var rowCount = table.rows.length;
            for (var i = rowCount - 1; i > 0; i--)
                table.deleteRow(i);

            recordMap.forEach(function(record)
            {
                var row = table.insertRow();
                row.insertCell(0).innerHTML = record.account;
                row.insertCell(1).innerHTML = record.desktopApp;
                row.insertCell(2).innerHTML = record.mobileApp;
                row.insertCell(3).innerHTML = record.login;
                row.insertCell(4).innerHTML = record.password;
                row.insertCell(5).innerHTML = record.otp;
                
                for (var i = 0; i < row.cells.length; i++)
                {
                    var cell = row.cells[i];
                    var html = cell.innerHTML;
                    if (html == 'undefined') cell.innerHTML = "&nbsp;";
                    else cell.innerHTML = html.replace("\n", "<br/>");
                }
            });
        };
      })(f);

      reader.readAsBinaryString(f);
  }

  document.getElementById('upload').addEventListener('change', handleFileSelect, false);
</script>

</body>
</html>
